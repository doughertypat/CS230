2.	Write a program in C program to first turn a simple arithmetic expression into a binary tree, then evaluate the arithmetic expression using the binary tree. In such expressions, only +, -, *, / operators are allowed. You also need to allow parenthesis ( ). Such as, 7+5*8-4/(2-1)+6/2*3-6/(2*3)+(5+(3*(2+1)+2)*6)*3. Any level of parenthesis should be allowed. You also need to allow white spaces in the expression. You can enforce the limit of a maximum of 100 operands in the expression. Your program can assume that all operands are integers. Your program has to be able to report error on dividing by zero, or unallowed combinations of operators.

Your program should also print out the expression in prefix natation, which is to list the operator before operands. For example, the prefix notation of expression 5 + 6*(1-2) is + 5 * 6 - 1 2. The prefix notation can be easily produced from the binary tree. Then, the value of the expression can be easily calculated using the prefix notation.

Your program has to be included into at least 2 separate code files (can be more than 2 files). It is recommended that you put the declarations of data structures into an include file, the code for generating a binary tree into a C file, and the code for evaluation of the expression using the binary tree into a separate C file.
You cannot reuse program in HW2 to evaluate the result for you. Your program has to first explicitly construct a binary tree, then calculate the value of the expression using the binary tree. Other ways of implementation are not accepted
